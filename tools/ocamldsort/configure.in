#(***********************************************************************)
#(*                                                                     *)
#(*            Maxence Guesdon, projet Cristal, INRIA Rocquencourt      *)
#(*                                                                     *)
#(*  Copyright 2002 Institut National de Recherche en Informatique et   *)
#(*  en Automatique.  All rights reserved.  This file is distributed    *)
#(*  under the terms of the Q Public License version 1.0.               *)
#(*                                                                     *)
#(***********************************************************************)#
#
# autoconf input based on sample by Jean-Christophe Filliâtre

# check for one particular file of the sources 
AC_INIT(main.ml)

# Check for Ocaml compilers

OCAML_NEEDED=3.04

# we first look for ocamlc in the path; if not present, we fail
AC_PATH_PROG(OCAMLC,ocamlc,no)
if test "$OCAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we first look for ocaml in the path; if not present, we fail
AC_PATH_PROG(OCAML,ocaml,no)
if test "$OCAML" = no ; then
	AC_MSG_ERROR(Cannot find ocaml.)
fi

# we first look for camlp4 in the path; if not present, we fail
AC_PATH_PROG(CAMLP4,camlp4,no)
if test "$CAMLP4" = no ; then
	AC_MSG_ERROR(Cannot find camlp4.)
fi

# we look for the directory of ocamlc in $OCAMLC
OCAMLBIN=`dirname $OCAMLC`

# we extract Ocaml version number and library path
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
#echo "ocaml version is $OCAMLVERSION"

MLCHECK="
let v = \"$OCAMLVERSION\" 
let version = try let p = String.index v '+' in String.sub v 0 p with
Not_found -> v 
let f s =
  try
    let p = String.index_from s 0 '.' in
    let major = int_of_string (String.sub s 0 p) in
    try
      let p2 = String.index_from s (p+1) '.' in
      let minor = int_of_string (String.sub s (p+1) (p2 - p - 1)) in
      try
        let len = String.length s in
        let add = int_of_string (String.sub s (p2+1) (len - p2 - 1)) in
        (major, minor, add)
      with
        _ ->
         (major, minor, 0)
    with
      _ ->
        (major, 0, 0)
  with _ -> (0,0,0)

let (major,minor,add) = f version 
let (major_r, minor_r, add_r) = f \"$OCAML_NEEDED\" 
let _ = if major > major_r or (major = major_r && (minor > minor_r or
(minor = minor_r && add >= add_r))) then exit 0 else exit 1;;
"

# check that this version is at least the one we need
if (echo $MLCHECK | $OCAML > /dev/null) ; then
        AC_MSG_RESULT(OCaml version $OCAMLVERSION is ok)
else
        AC_MSG_ERROR(OCaml version $OCAMLVERSION found ; version $OCAML_NEEDED or greater is needed)
fi

OCAMLLIB=`$OCAMLC -v | tail -1 | cut -f 4 -d " "`
echo "OCaml library path is $OCAMLLIB"

# set the default prefix to the ocaml directory
AC_PREFIX_PROGRAM(ocamlc)
exec_prefix=$prefix

# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_PATH_PROG(OCAMLOPT,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
	AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
	    OCAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

AC_PATH_PROG(OCAMLCDOTOPT,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
        AC_MSG_CHECKING(ocamlc.opt version)
        TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
        if test "$TMPVERSION" != "$OCAMLVERSION" ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
        else
            AC_MSG_RESULT(ok)
            OCAMLC=$OCAMLCDOTOPT
        fi
fi

# checking for ocamlopt.opt 
if test "$OCAMLOPT" != no ; then
    AC_PATH_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
        AC_MSG_CHECKING(ocamlc.opt version)
        TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
        if test "$TMPVER" != "$OCAMLVERSION" ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
        else
            AC_MSG_RESULT(ok)
            OCAMLOPT=$OCAMLOPTDOTOPT
        fi
    fi
fi

# ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_PATH_PROG(OCAMLDEP,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(Cannot find ocamldep.)
fi

# substitutions to perform
AC_SUBST(OCAMLC)
AC_SUBST(CAMLP4)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLBIN)

# Finally create the Makefile from Makefile.in
AC_OUTPUT(Makefile)
chmod a-w Makefile
