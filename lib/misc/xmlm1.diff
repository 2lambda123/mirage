diff --git a/lib/misc/xml/xml.ml b/lib/misc/xml/xml.ml
index 690ae32..d3ad895 100644
--- a/xml/xmlm.ml
+++ b/lib/misc/xml/xml.ml
@@ -63,7 +63,6 @@ module type S = sig
   val error_message : error -> string      
 
   type source = [ 
-    | `Channel of in_channel 
     | `String of int * std_string 
     | `Fun of (unit -> int) ]
 
@@ -87,7 +86,7 @@ module type S = sig
 
   type 'a frag = [ `El of tag * 'a list | `Data of string ]
   type dest = [ 
-    | `Channel of out_channel | `Buffer of std_buffer | `Fun of (int -> unit) ]
+    `Buffer of std_buffer | `Fun of (int -> unit) ]
 
   type output
   val make_output : ?nl:bool -> ?indent:int option -> 
@@ -300,7 +299,6 @@ struct
     | Eoi            (* End of input *)
 	
   type source = [ 
-    | `Channel of in_channel 
     | `String of int * std_string
     | `Fun of (unit -> int) ]
 
@@ -937,7 +935,7 @@ struct
 
   type 'a frag = [ `El of tag * 'a list | `Data of string ]
   type dest = [ 
-    | `Channel of out_channel | `Buffer of std_buffer | `Fun of (int -> unit) ]
+    `Buffer of std_buffer | `Fun of (int -> unit) ]
 
   type output = 
       { nl : bool;                (* True if a newline is output at the end. *)
diff --git a/lib/misc/xml/xml.mli b/lib/misc/xml/xml.mli
index 2f2316c..b5fc0d6 100644
--- a/xml/xmlm.mli
+++ b/lib/misc/xml/xml.mli
@@ -115,7 +115,7 @@ exception Error of pos * error
 (** Raised on input errors. *)
 
 type source = [ 
-  | `Channel of in_channel | `String of int * string | `Fun of (unit -> int) ]
+  `String of int * string | `Fun of (unit -> int) ]
 (** The type for input sources. For [`String] starts reading at the
     given integer position. For [`Fun] the function must return the
     next {e byte} as an [int] and raise [End_of_file] if there is no
@@ -193,7 +193,7 @@ val pos : input -> pos
 type 'a frag = [ `El of tag * 'a list | `Data of string ]
 (** The type for deconstructing data structures of type ['a]. *)
 
-type dest = [ `Channel of out_channel | `Buffer of Buffer.t | 
+type dest = [ `Buffer of Buffer.t | 
               `Fun of (int -> unit) ]
 (** The type for output destinations. For [`Buffer], the buffer won't
     be cleared. For [`Fun] the function is called with the output {e
@@ -350,7 +350,6 @@ module type S = sig
   val error_message : error -> string
 
   type source = [ 
-  | `Channel of in_channel 
   | `String of int * std_string
   | `Fun of (unit -> int) ]
 
@@ -376,7 +375,7 @@ module type S = sig
 
   type 'a frag = [ `El of tag * 'a list | `Data of string ]
   type dest = [ 
-    | `Channel of out_channel | `Buffer of std_buffer | `Fun of (int -> unit) ]
+    `Buffer of std_buffer | `Fun of (int -> unit) ]
 
   type output
   val make_output : ?nl:bool -> ?indent:int option -> 
@@ -559,7 +558,6 @@ let ex_ns = (Xmlm.ns_xmlns, "ex"), "http://example.org/ex"]}
 
     {3:outmisc Miscellaneous}
     {ul
-    {- Output on a channel does not flush it.}
     {- In attribute and character data you provide, markup 
        delimiters ['<'],['>'],['&'], and ['\"'] are 
         automatically escaped to 
