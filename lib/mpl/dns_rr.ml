(* This file was autogenerated by MPL *)
open Mpl_stdlib
exception Bad_packet of string

type aclass_t = [
  |`IN
  |`CSNET
  |`CHAOS
  |`HS
  |`Unknown of int
]

let aclass_marshal (a:aclass_t) =
  match a with
  |`IN -> 1
  |`CSNET -> 2
  |`CHAOS -> 3
  |`HS -> 4
  |`Unknown x -> x

let aclass_unmarshal a : aclass_t =
  match a with
  |1 -> `IN
  |2 -> `CSNET
  |3 -> `CHAOS
  |4 -> `HS
  |x -> `Unknown x

let aclass_to_string (a:aclass_t) =
  match a with
  |`IN -> "IN"
  |`CSNET -> "CSNET"
  |`CHAOS -> "CHAOS"
  |`HS -> "HS"
  |`Unknown x -> Printf.sprintf "%d" x

let aclass_of_string s : aclass_t option = match s with
  |"IN" -> Some `IN
  |"CSNET" -> Some `CSNET
  |"CHAOS" -> Some `CHAOS
  |"HS" -> Some `HS
  |_ -> None

module UNKNOWN = struct
  class o
    ~name
    ~(data_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = data_length+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method data =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      (* set_data unsupported for now (type byte array) *)
      method data_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_length = data_length

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+data_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.UNKNOWN.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  data = " ^ (Mpl_raw.prettyprint self#data));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~(data:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) 0 in
      let data___len = match data with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let data___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let atype = (Mpl_uint16.of_int 999) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let data = data in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      skip env data___len;
      new o
      ~name:name
      ~data_length:data___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module UNSPEC = struct
  class o
    ~name
    ~(data_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = data_length+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method data =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      (* set_data unsupported for now (type byte array) *)
      method data_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_length = data_length

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+data_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.UNSPEC.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  data = " ^ (Mpl_raw.prettyprint self#data));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~(data:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) 0 in
      let data___len = match data with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let data___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let atype = (Mpl_uint16.of_int 103) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let data = data in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      skip env data___len;
      new o
      ~name:name
      ~data_length:data___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module DS = struct
  module SHA1 = struct
    class o
      ~name
      (env:env) =
      object(self)
        method env = env_at env 0 self#sizeof
        method sizeof = 20+1+1+2+2+4+2+2+(Mpl_dns_label.size name)
        method name =
          (Mpl_dns_label.to_string_list name)
        (* set_name unsupported for now (type custom_type) *)


        method aclass =
          let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
          aclass_unmarshal aclass
        method set_aclass v : unit =
          Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

        method ttl =
          Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
        method set_ttl v : unit =
          Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


        method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

        method key_tag =
          Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2+2+4+2))
        method set_key_tag v : unit =
          Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2) 2) (Mpl_uint16.of_int v)

        method algorithm =
          Mpl_byte.to_int (Mpl_byte.at env ((Mpl_dns_label.size name)+2+2+4+2+2))
        method set_algorithm v : unit =
          Mpl_byte.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+2) 1) (Mpl_byte.of_int v)


        method digest =
          Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2+2+1+1) 20
        (* set_digest unsupported for now (type byte array) *)
        method digest_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2+2+1+1) 20
        method digest_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2+2+1+1) 20
        method digest_length = 20

        method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+2+1+1+20


        method prettyprint =
          let out = prerr_endline in
          out "[ Dns_rr.DS.SHA1.dns_rr ]";
          out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
          (* atype : bound *)
          out ("  aclass = " ^ (aclass_to_string self#aclass));
          out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
          (* rdlength : bound *)
          (* start_of_answers : bound *)
          out ("  key_tag = " ^ (Printf.sprintf "%u" self#key_tag));
          out ("  algorithm = " ^ (Printf.sprintf "%u" self#algorithm));
          (* digest_type : bound *)
          out ("  digest = " ^ (Mpl_raw.prettyprint self#digest));
          (* end_of_answers : bound *)
          ()
      end

    let t
      ~name
      ?(aclass=`IN)
      ~ttl
      ~key_tag
      ~algorithm
      ~(digest:data)
      env =
        let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
        let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
        let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2+2+1+1) 0 in
        let digest___len = match digest with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+2+1+1+20 in
        let atype = (Mpl_uint16.of_int 43) in (* const *)
        let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
        let digest_type = (Mpl_byte.of_int 1) in (* const *)
        let __aclass = aclass_marshal aclass in
        let __aclass = (Mpl_uint16.of_int __aclass) in
        let ttl = (Mpl_uint32.of_int32 ttl) in
        let key_tag = (Mpl_uint16.of_int key_tag) in
        let algorithm = (Mpl_byte.of_int algorithm) in
        let digest = digest in
        let name = Mpl_dns_label.marshal ~comp:true env name in
        Mpl_uint16.marshal env atype;
        Mpl_uint16.marshal env __aclass;
        Mpl_uint32.marshal env ttl;
        Mpl_uint16.marshal env rdlength;
        Mpl_uint16.marshal env key_tag;
        Mpl_byte.marshal env algorithm;
        Mpl_byte.marshal env digest_type;
        skip env digest___len;
        new o
        ~name:name
        env

    let m (x:(env->o)) env = x env
    let sizeof (x:o) = x#sizeof
    let prettyprint (x:o) = x#prettyprint
    let env (x:o) = x#env
  end

  type o = [
  |`SHA1 of SHA1.o
  ]

  type x = [
  |`SHA1 of (env -> SHA1.o)
  ]

  let m (x:x) env : o = match x with
  |`SHA1 (fn:(env->SHA1.o)) -> `SHA1 (fn env)

  let prettyprint (x:o) = match x with
  |`SHA1 x -> x#prettyprint

  let sizeof (x:o) = match x with
  |`SHA1 x -> x#sizeof

  let env (x:o) = match x with
  |`SHA1 x -> x#env

end

module DNAME = struct
  class o
    ~name
    ~target
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size target)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method target =
        (Mpl_dns_label.to_string_list target)
      (* set_target unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size target)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.DNAME.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  target = " ^ (Mpl_dns_label.prettyprint self#target));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~target
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let target = (Mpl_dns_label.of_string_list target) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size target) in
      let atype = (Mpl_uint16.of_int 39) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let target = Mpl_dns_label.marshal env target in
      new o
      ~name:name
      ~target:target
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module A6 = struct
  class o
    ~name
    ~(data_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = data_length+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method data =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      (* set_data unsupported for now (type byte array) *)
      method data_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_length = data_length

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+data_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.A6.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  data = " ^ (Mpl_raw.prettyprint self#data));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~(data:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) 0 in
      let data___len = match data with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let data___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let atype = (Mpl_uint16.of_int 36) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let data = data in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      skip env data___len;
      new o
      ~name:name
      ~data_length:data___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module SRV = struct
  class o
    ~name
    ~target
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size target)+2+2+2+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method priority =
        Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2+2+4+2))
      method set_priority v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2) 2) (Mpl_uint16.of_int v)

      method weight =
        Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2+2+4+2+2))
      method set_weight v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+2) 2) (Mpl_uint16.of_int v)

      method port =
        Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2+2+4+2+2+2))
      method set_port v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+2+2) 2) (Mpl_uint16.of_int v)

      method target =
        (Mpl_dns_label.to_string_list target)
      (* set_target unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+2+2+2+(Mpl_dns_label.size target)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.SRV.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  priority = " ^ (Printf.sprintf "%u" self#priority));
        out ("  weight = " ^ (Printf.sprintf "%u" self#weight));
        out ("  port = " ^ (Printf.sprintf "%u" self#port));
        out ("  target = " ^ (Mpl_dns_label.prettyprint self#target));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~priority
    ~weight
    ~port
    ~target
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let target = (Mpl_dns_label.of_string_list target) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+2+2+2+(Mpl_dns_label.size target) in
      let atype = (Mpl_uint16.of_int 33) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let priority = (Mpl_uint16.of_int priority) in
      let weight = (Mpl_uint16.of_int weight) in
      let port = (Mpl_uint16.of_int port) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      Mpl_uint16.marshal env priority;
      Mpl_uint16.marshal env weight;
      Mpl_uint16.marshal env port;
      let target = Mpl_dns_label.marshal env target in
      new o
      ~name:name
      ~target:target
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module LOC = struct
  class o
    ~name
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = 4+4+4+1+1+1+1+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2


      method size =
        Mpl_byte.to_int (Mpl_byte.at env ((Mpl_dns_label.size name)+2+2+4+2+1))
      method set_size v : unit =
        Mpl_byte.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+1) 1) (Mpl_byte.of_int v)

      method horiz_pre =
        Mpl_byte.to_int (Mpl_byte.at env ((Mpl_dns_label.size name)+2+2+4+2+1+1))
      method set_horiz_pre v : unit =
        Mpl_byte.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+1+1) 1) (Mpl_byte.of_int v)

      method vert_pre =
        Mpl_byte.to_int (Mpl_byte.at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1))
      method set_vert_pre v : unit =
        Mpl_byte.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1) 1) (Mpl_byte.of_int v)

      method latitude =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1+1))
      method set_latitude v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1+1) 4) (Mpl_uint32.of_int32 v)

      method longitude =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1+1+4))
      method set_longitude v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1+1+4) 4) (Mpl_uint32.of_int32 v)

      method altitude =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1+1+4+4))
      method set_altitude v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+1+1+1+1+4+4) 4) (Mpl_uint32.of_int32 v)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+1+1+1+1+4+4+4


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.LOC.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        (* version : bound *)
        out ("  size = " ^ (Printf.sprintf "%u" self#size));
        out ("  horiz_pre = " ^ (Printf.sprintf "%u" self#horiz_pre));
        out ("  vert_pre = " ^ (Printf.sprintf "%u" self#vert_pre));
        out ("  latitude = " ^ (Printf.sprintf "%lu" self#latitude));
        out ("  longitude = " ^ (Printf.sprintf "%lu" self#longitude));
        out ("  altitude = " ^ (Printf.sprintf "%lu" self#altitude));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~size
    ~horiz_pre
    ~vert_pre
    ~latitude
    ~longitude
    ~altitude
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+1+1+1+1+4+4+4 in
      let atype = (Mpl_uint16.of_int 29) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let version = (Mpl_byte.of_int 0) in (* const *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let size = (Mpl_byte.of_int size) in
      let horiz_pre = (Mpl_byte.of_int horiz_pre) in
      let vert_pre = (Mpl_byte.of_int vert_pre) in
      let latitude = (Mpl_uint32.of_int32 latitude) in
      let longitude = (Mpl_uint32.of_int32 longitude) in
      let altitude = (Mpl_uint32.of_int32 altitude) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      Mpl_byte.marshal env version;
      Mpl_byte.marshal env size;
      Mpl_byte.marshal env horiz_pre;
      Mpl_byte.marshal env vert_pre;
      Mpl_uint32.marshal env latitude;
      Mpl_uint32.marshal env longitude;
      Mpl_uint32.marshal env altitude;
      new o
      ~name:name
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module AAAA = struct
  class o
    ~name
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = 16+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method ip =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2) 16
      (* set_ip unsupported for now (type byte array) *)
      method ip_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) 16
      method ip_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2) 16
      method ip_length = 16

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+16


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.AAAA.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  ip = " ^ (Mpl_raw.prettyprint self#ip));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~(ip:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) 0 in
      let ip___len = match ip with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+16 in
      let atype = (Mpl_uint16.of_int 28) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let ip = ip in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      skip env ip___len;
      new o
      ~name:name
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module GPOS = struct
  class o
    ~name
    ~longitude
    ~latitude
    ~altitude
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_string8.size altitude)+(Mpl_string8.size latitude)+(Mpl_string8.size longitude)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method longitude =
        (Mpl_string8.to_string longitude)
      (* set_longitude unsupported for now (type custom_type) *)

      method latitude =
        (Mpl_string8.to_string latitude)
      (* set_latitude unsupported for now (type custom_type) *)

      method altitude =
        (Mpl_string8.to_string altitude)
      (* set_altitude unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size longitude)+(Mpl_string8.size latitude)+(Mpl_string8.size altitude)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.GPOS.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  longitude = " ^ (Mpl_string8.prettyprint self#longitude));
        out ("  latitude = " ^ (Mpl_string8.prettyprint self#latitude));
        out ("  altitude = " ^ (Mpl_string8.prettyprint self#altitude));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~longitude
    ~latitude
    ~altitude
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let longitude = (Mpl_string8.of_string longitude) in (* custom *)
      let latitude = (Mpl_string8.of_string latitude) in (* custom *)
      let altitude = (Mpl_string8.of_string altitude) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size longitude)+(Mpl_string8.size latitude)+(Mpl_string8.size altitude) in
      let atype = (Mpl_uint16.of_int 27) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let longitude = Mpl_string8.marshal env longitude in
      let latitude = Mpl_string8.marshal env latitude in
      let altitude = Mpl_string8.marshal env altitude in
      new o
      ~name:name
      ~longitude:longitude
      ~latitude:latitude
      ~altitude:altitude
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module KEY = struct
  class o
    ~name
    ~(data_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = data_length+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method data =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      (* set_data unsupported for now (type byte array) *)
      method data_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_length = data_length

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+data_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.KEY.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  data = " ^ (Mpl_raw.prettyprint self#data));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~(data:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) 0 in
      let data___len = match data with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let data___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let atype = (Mpl_uint16.of_int 25) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let data = data in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      skip env data___len;
      new o
      ~name:name
      ~data_length:data___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module RT = struct
  class o
    ~name
    ~intermediate_host
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size intermediate_host)+2+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method preference =
        Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2+2+4+2))
      method set_preference v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2) 2) (Mpl_uint16.of_int v)

      method intermediate_host =
        (Mpl_dns_label.to_string_list intermediate_host)
      (* set_intermediate_host unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+2+(Mpl_dns_label.size intermediate_host)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.RT.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  preference = " ^ (Printf.sprintf "%u" self#preference));
        out ("  intermediate_host = " ^ (Mpl_dns_label.prettyprint self#intermediate_host));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~preference
    ~intermediate_host
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let intermediate_host = (Mpl_dns_label.of_string_list intermediate_host) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+2+(Mpl_dns_label.size intermediate_host) in
      let atype = (Mpl_uint16.of_int 21) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let preference = (Mpl_uint16.of_int preference) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      Mpl_uint16.marshal env preference;
      let intermediate_host = Mpl_dns_label.marshal env intermediate_host in
      new o
      ~name:name
      ~intermediate_host:intermediate_host
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module ISDN = struct
  class o
    ~name
    ~data
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_string8.size data)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method data =
        (Mpl_string8.to_string data)
      (* set_data unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.ISDN.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  data = " ^ (Mpl_string8.prettyprint self#data));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~data
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let data = (Mpl_string8.of_string data) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let data___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data) in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data) in
      let atype = (Mpl_uint16.of_int 20) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let data = Mpl_string8.marshal env data in
      new o
      ~name:name
      ~data:data
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module X25 = struct
  class o
    ~name
    ~psdn_address
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_string8.size psdn_address)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method psdn_address =
        (Mpl_string8.to_string psdn_address)
      (* set_psdn_address unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size psdn_address)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.X25.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  psdn_address = " ^ (Mpl_string8.prettyprint self#psdn_address));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~psdn_address
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let psdn_address = (Mpl_string8.of_string psdn_address) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size psdn_address) in
      let atype = (Mpl_uint16.of_int 19) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let psdn_address = Mpl_string8.marshal env psdn_address in
      new o
      ~name:name
      ~psdn_address:psdn_address
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module AFSDB = struct
  class o
    ~name
    ~hostname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size hostname)+2+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method subtype =
        Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2+2+4+2))
      method set_subtype v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2) 2) (Mpl_uint16.of_int v)

      method hostname =
        (Mpl_dns_label.to_string_list hostname)
      (* set_hostname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+2+(Mpl_dns_label.size hostname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.AFSDB.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  subtype = " ^ (Printf.sprintf "%u" self#subtype));
        out ("  hostname = " ^ (Mpl_dns_label.prettyprint self#hostname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~subtype
    ~hostname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let hostname = (Mpl_dns_label.of_string_list hostname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+2+(Mpl_dns_label.size hostname) in
      let atype = (Mpl_uint16.of_int 18) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let subtype = (Mpl_uint16.of_int subtype) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      Mpl_uint16.marshal env subtype;
      let hostname = Mpl_dns_label.marshal env hostname in
      new o
      ~name:name
      ~hostname:hostname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module RP = struct
  class o
    ~name
    ~mbox_dname
    ~txt_dname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size txt_dname)+(Mpl_dns_label.size mbox_dname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method mbox_dname =
        (Mpl_dns_label.to_string_list mbox_dname)
      (* set_mbox_dname unsupported for now (type custom_type) *)

      method txt_dname =
        (Mpl_dns_label.to_string_list txt_dname)
      (* set_txt_dname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size mbox_dname)+(Mpl_dns_label.size txt_dname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.RP.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  mbox_dname = " ^ (Mpl_dns_label.prettyprint self#mbox_dname));
        out ("  txt_dname = " ^ (Mpl_dns_label.prettyprint self#txt_dname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~mbox_dname
    ~txt_dname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let mbox_dname = (Mpl_dns_label.of_string_list mbox_dname) in (* custom *)
      let txt_dname = (Mpl_dns_label.of_string_list txt_dname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size mbox_dname)+(Mpl_dns_label.size txt_dname) in
      let atype = (Mpl_uint16.of_int 17) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let mbox_dname = Mpl_dns_label.marshal env mbox_dname in
      let txt_dname = Mpl_dns_label.marshal env txt_dname in
      new o
      ~name:name
      ~mbox_dname:mbox_dname
      ~txt_dname:txt_dname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module TXT = struct
  class o
    ~name
    ~data
    ~(misc_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = misc_length+(Mpl_string8.size data)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method data =
        (Mpl_string8.to_string data)
      (* set_data unsupported for now (type custom_type) *)

      method misc =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data)) misc_length
      (* set_misc unsupported for now (type byte array) *)
      method misc_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data)) misc_length
      method misc_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data)) misc_length
      method misc_length = misc_length

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data)+misc_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.TXT.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  data = " ^ (Mpl_string8.prettyprint self#data));
        out ("  misc = " ^ (Mpl_raw.prettyprint self#misc));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~data
    ~(misc:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let data = (Mpl_string8.of_string data) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let data___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data) in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data)) 0 in
      let misc___len = match misc with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size data)+misc___len in
      let atype = (Mpl_uint16.of_int 16) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let misc = misc in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let data = Mpl_string8.marshal env data in
      skip env misc___len;
      new o
      ~name:name
      ~data:data
      ~misc_length:misc___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module MX = struct
  class o
    ~name
    ~hostname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size hostname)+2+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method preference =
        Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2+2+4+2))
      method set_preference v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2) 2) (Mpl_uint16.of_int v)

      method hostname =
        (Mpl_dns_label.to_string_list hostname)
      (* set_hostname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+2+(Mpl_dns_label.size hostname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.MX.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  preference = " ^ (Printf.sprintf "%u" self#preference));
        out ("  hostname = " ^ (Mpl_dns_label.prettyprint self#hostname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~preference
    ~hostname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let hostname = (Mpl_dns_label.of_string_list ~comp:true hostname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+2+(Mpl_dns_label.size hostname) in
      let atype = (Mpl_uint16.of_int 15) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let preference = (Mpl_uint16.of_int preference) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      Mpl_uint16.marshal env preference;
      let hostname = Mpl_dns_label.marshal ~comp:true env hostname in
      new o
      ~name:name
      ~hostname:hostname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module MINFO = struct
  class o
    ~name
    ~rmailbox
    ~emailbox
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size emailbox)+(Mpl_dns_label.size rmailbox)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method rmailbox =
        (Mpl_dns_label.to_string_list rmailbox)
      (* set_rmailbox unsupported for now (type custom_type) *)

      method emailbox =
        (Mpl_dns_label.to_string_list emailbox)
      (* set_emailbox unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size rmailbox)+(Mpl_dns_label.size emailbox)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.MINFO.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  rmailbox = " ^ (Mpl_dns_label.prettyprint self#rmailbox));
        out ("  emailbox = " ^ (Mpl_dns_label.prettyprint self#emailbox));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~rmailbox
    ~emailbox
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let rmailbox = (Mpl_dns_label.of_string_list ~comp:true rmailbox) in (* custom *)
      let emailbox = (Mpl_dns_label.of_string_list ~comp:true emailbox) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size rmailbox)+(Mpl_dns_label.size emailbox) in
      let atype = (Mpl_uint16.of_int 14) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let rmailbox = Mpl_dns_label.marshal ~comp:true env rmailbox in
      let emailbox = Mpl_dns_label.marshal ~comp:true env emailbox in
      new o
      ~name:name
      ~rmailbox:rmailbox
      ~emailbox:emailbox
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module HINFO = struct
  class o
    ~name
    ~cpu
    ~os
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_string8.size os)+(Mpl_string8.size cpu)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method cpu =
        (Mpl_string8.to_string cpu)
      (* set_cpu unsupported for now (type custom_type) *)

      method os =
        (Mpl_string8.to_string os)
      (* set_os unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size cpu)+(Mpl_string8.size os)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.HINFO.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  cpu = " ^ (Mpl_string8.prettyprint self#cpu));
        out ("  os = " ^ (Mpl_string8.prettyprint self#os));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~cpu
    ~os
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let cpu = (Mpl_string8.of_string cpu) in (* custom *)
      let os = (Mpl_string8.of_string os) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_string8.size cpu)+(Mpl_string8.size os) in
      let atype = (Mpl_uint16.of_int 13) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let cpu = Mpl_string8.marshal env cpu in
      let os = Mpl_string8.marshal env os in
      new o
      ~name:name
      ~cpu:cpu
      ~os:os
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module PTR = struct
  class o
    ~name
    ~ptrdname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size ptrdname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method ptrdname =
        (Mpl_dns_label.to_string_list ptrdname)
      (* set_ptrdname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size ptrdname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.PTR.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  ptrdname = " ^ (Mpl_dns_label.prettyprint self#ptrdname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~ptrdname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let ptrdname = (Mpl_dns_label.of_string_list ~comp:true ptrdname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size ptrdname) in
      let atype = (Mpl_uint16.of_int 12) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let ptrdname = Mpl_dns_label.marshal ~comp:true env ptrdname in
      new o
      ~name:name
      ~ptrdname:ptrdname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module WKS = struct
  class o
    ~name
    ~(bitmap_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = bitmap_length+1+4+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method address =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2))
      method set_address v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2) 4) (Mpl_uint32.of_int32 v)

      method protocol =
        Mpl_byte.to_int (Mpl_byte.at env ((Mpl_dns_label.size name)+2+2+4+2+4))
      method set_protocol v : unit =
        Mpl_byte.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+4) 1) (Mpl_byte.of_int v)

      method bitmap =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2+4+1) bitmap_length
      (* set_bitmap unsupported for now (type byte array) *)
      method bitmap_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2+4+1) bitmap_length
      method bitmap_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2+4+1) bitmap_length
      method bitmap_length = bitmap_length

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+4+1+bitmap_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.WKS.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  address = " ^ (Printf.sprintf "%lu" self#address));
        out ("  protocol = " ^ (Printf.sprintf "%u" self#protocol));
        out ("  bitmap = " ^ (Mpl_raw.prettyprint self#bitmap));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~address
    ~protocol
    ~(bitmap:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2+4+1) 0 in
      let bitmap___len = match bitmap with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+4+1+bitmap___len in
      let atype = (Mpl_uint16.of_int 11) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let address = (Mpl_uint32.of_int32 address) in
      let protocol = (Mpl_byte.of_int protocol) in
      let bitmap = bitmap in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      Mpl_uint32.marshal env address;
      Mpl_byte.marshal env protocol;
      skip env bitmap___len;
      new o
      ~name:name
      ~bitmap_length:bitmap___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module NULL = struct
  class o
    ~name
    ~(data_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = data_length+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method data =
        Mpl_raw.at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      (* set_data unsupported for now (type byte array) *)
      method data_env : env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_frag = Mpl_raw.frag env ((Mpl_dns_label.size name)+2+2+4+2) data_length
      method data_length = data_length

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+data_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.NULL.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  data = " ^ (Mpl_raw.prettyprint self#data));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~(data:data)
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let ___env = env_at env ((Mpl_dns_label.size name)+2+2+4+2) 0 in
      let data___len = match data with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let data___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+data___len in
      let atype = (Mpl_uint16.of_int 10) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let data = data in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      skip env data___len;
      new o
      ~name:name
      ~data_length:data___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module MR = struct
  class o
    ~name
    ~newname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size newname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method newname =
        (Mpl_dns_label.to_string_list newname)
      (* set_newname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size newname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.MR.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  newname = " ^ (Mpl_dns_label.prettyprint self#newname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~newname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let newname = (Mpl_dns_label.of_string_list newname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size newname) in
      let atype = (Mpl_uint16.of_int 9) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let newname = Mpl_dns_label.marshal env newname in
      new o
      ~name:name
      ~newname:newname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module MG = struct
  class o
    ~name
    ~mgmname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size mgmname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method mgmname =
        (Mpl_dns_label.to_string_list mgmname)
      (* set_mgmname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size mgmname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.MG.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  mgmname = " ^ (Mpl_dns_label.prettyprint self#mgmname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~mgmname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let mgmname = (Mpl_dns_label.of_string_list mgmname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size mgmname) in
      let atype = (Mpl_uint16.of_int 8) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let mgmname = Mpl_dns_label.marshal env mgmname in
      new o
      ~name:name
      ~mgmname:mgmname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module MB = struct
  class o
    ~name
    ~madname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size madname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method madname =
        (Mpl_dns_label.to_string_list madname)
      (* set_madname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size madname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.MB.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  madname = " ^ (Mpl_dns_label.prettyprint self#madname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~madname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let madname = (Mpl_dns_label.of_string_list madname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size madname) in
      let atype = (Mpl_uint16.of_int 7) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let madname = Mpl_dns_label.marshal env madname in
      new o
      ~name:name
      ~madname:madname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module SOA = struct
  class o
    ~name
    ~primary_ns
    ~admin_mb
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = 4+4+4+4+4+(Mpl_dns_label.size admin_mb)+(Mpl_dns_label.size primary_ns)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method primary_ns =
        (Mpl_dns_label.to_string_list primary_ns)
      (* set_primary_ns unsupported for now (type custom_type) *)

      method admin_mb =
        (Mpl_dns_label.to_string_list admin_mb)
      (* set_admin_mb unsupported for now (type custom_type) *)

      method serial =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)))
      method set_serial v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)) 4) (Mpl_uint32.of_int32 v)

      method refresh =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4))
      method set_refresh v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4) 4) (Mpl_uint32.of_int32 v)

      method retry =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4))
      method set_retry v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4) 4) (Mpl_uint32.of_int32 v)

      method expiration =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4+4))
      method set_expiration v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4+4) 4) (Mpl_uint32.of_int32 v)

      method minttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4+4+4))
      method set_minttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4+4+4) 4) (Mpl_uint32.of_int32 v)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4+4+4+4


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.SOA.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  primary_ns = " ^ (Mpl_dns_label.prettyprint self#primary_ns));
        out ("  admin_mb = " ^ (Mpl_dns_label.prettyprint self#admin_mb));
        out ("  serial = " ^ (Printf.sprintf "%lu" self#serial));
        out ("  refresh = " ^ (Printf.sprintf "%lu" self#refresh));
        out ("  retry = " ^ (Printf.sprintf "%lu" self#retry));
        out ("  expiration = " ^ (Printf.sprintf "%lu" self#expiration));
        out ("  minttl = " ^ (Printf.sprintf "%lu" self#minttl));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~primary_ns
    ~admin_mb
    ~serial
    ~refresh
    ~retry
    ~expiration
    ~minttl
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let primary_ns = (Mpl_dns_label.of_string_list ~comp:true primary_ns) in (* custom *)
      let admin_mb = (Mpl_dns_label.of_string_list ~comp:true admin_mb) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size primary_ns)+(Mpl_dns_label.size admin_mb)+4+4+4+4+4 in
      let atype = (Mpl_uint16.of_int 6) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let serial = (Mpl_uint32.of_int32 serial) in
      let refresh = (Mpl_uint32.of_int32 refresh) in
      let retry = (Mpl_uint32.of_int32 retry) in
      let expiration = (Mpl_uint32.of_int32 expiration) in
      let minttl = (Mpl_uint32.of_int32 minttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let primary_ns = Mpl_dns_label.marshal ~comp:true env primary_ns in
      let admin_mb = Mpl_dns_label.marshal ~comp:true env admin_mb in
      Mpl_uint32.marshal env serial;
      Mpl_uint32.marshal env refresh;
      Mpl_uint32.marshal env retry;
      Mpl_uint32.marshal env expiration;
      Mpl_uint32.marshal env minttl;
      new o
      ~name:name
      ~primary_ns:primary_ns
      ~admin_mb:admin_mb
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module CNAME = struct
  class o
    ~name
    ~cname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size cname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method cname =
        (Mpl_dns_label.to_string_list cname)
      (* set_cname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size cname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.CNAME.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  cname = " ^ (Mpl_dns_label.prettyprint self#cname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~cname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let cname = (Mpl_dns_label.of_string_list cname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size cname) in
      let atype = (Mpl_uint16.of_int 5) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let cname = Mpl_dns_label.marshal env cname in
      new o
      ~name:name
      ~cname:cname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module MF = struct
  class o
    ~name
    ~madname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size madname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method madname =
        (Mpl_dns_label.to_string_list madname)
      (* set_madname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size madname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.MF.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  madname = " ^ (Mpl_dns_label.prettyprint self#madname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~madname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let madname = (Mpl_dns_label.of_string_list madname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size madname) in
      let atype = (Mpl_uint16.of_int 4) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let madname = Mpl_dns_label.marshal env madname in
      new o
      ~name:name
      ~madname:madname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module MD = struct
  class o
    ~name
    ~madname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size madname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method madname =
        (Mpl_dns_label.to_string_list madname)
      (* set_madname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size madname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.MD.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  madname = " ^ (Mpl_dns_label.prettyprint self#madname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~madname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let madname = (Mpl_dns_label.of_string_list madname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size madname) in
      let atype = (Mpl_uint16.of_int 3) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let madname = Mpl_dns_label.marshal env madname in
      new o
      ~name:name
      ~madname:madname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module NS = struct
  class o
    ~name
    ~hostname
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = (Mpl_dns_label.size hostname)+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method hostname =
        (Mpl_dns_label.to_string_list hostname)
      (* set_hostname unsupported for now (type custom_type) *)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size hostname)


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.NS.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  hostname = " ^ (Mpl_dns_label.prettyprint self#hostname));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~hostname
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let hostname = (Mpl_dns_label.of_string_list ~comp:true hostname) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+(Mpl_dns_label.size hostname) in
      let atype = (Mpl_uint16.of_int 2) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      let hostname = Mpl_dns_label.marshal ~comp:true env hostname in
      new o
      ~name:name
      ~hostname:hostname
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

module A = struct
  class o
    ~name
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = 4+2+4+2+2+(Mpl_dns_label.size name)
      method name =
        (Mpl_dns_label.to_string_list name)
      (* set_name unsupported for now (type custom_type) *)


      method aclass =
        let aclass = Mpl_uint16.to_int (Mpl_uint16.at env ((Mpl_dns_label.size name)+2)) in
        aclass_unmarshal aclass
      method set_aclass v : unit =
        Mpl_uint16.marshal (env_at env ((Mpl_dns_label.size name)+2) 2) (Mpl_uint16.of_int v)

      method ttl =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2))
      method set_ttl v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2) 4) (Mpl_uint32.of_int32 v)


      method start_of_answers = (Mpl_dns_label.size name)+2+2+4+2

      method ip =
        Mpl_uint32.to_int32 (Mpl_uint32.at env ((Mpl_dns_label.size name)+2+2+4+2))
      method set_ip v : unit =
        Mpl_uint32.marshal (env_at env ((Mpl_dns_label.size name)+2+2+4+2) 4) (Mpl_uint32.of_int32 v)

      method end_of_answers = (Mpl_dns_label.size name)+2+2+4+2+4


      method prettyprint =
        let out = prerr_endline in
        out "[ Dns_rr.A.dns_rr ]";
        out ("  name = " ^ (Mpl_dns_label.prettyprint self#name));
        (* atype : bound *)
        out ("  aclass = " ^ (aclass_to_string self#aclass));
        out ("  ttl = " ^ (Printf.sprintf "%lu" self#ttl));
        (* rdlength : bound *)
        (* start_of_answers : bound *)
        out ("  ip = " ^ (Printf.sprintf "%lu" self#ip));
        (* end_of_answers : bound *)
        ()
    end

  let t
    ~name
    ?(aclass=`IN)
    ~ttl
    ~ip
    env =
      let name = (Mpl_dns_label.of_string_list ~comp:true name) in (* custom *)
      let start_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2 in
      let end_of_answers___offset = (Mpl_dns_label.size name)+2+2+4+2+4 in
      let atype = (Mpl_uint16.of_int 1) in (* const *)
      let rdlength = (Mpl_uint16.of_int (end_of_answers___offset - start_of_answers___offset)) in (* bound *)
      let __aclass = aclass_marshal aclass in
      let __aclass = (Mpl_uint16.of_int __aclass) in
      let ttl = (Mpl_uint32.of_int32 ttl) in
      let ip = (Mpl_uint32.of_int32 ip) in
      let name = Mpl_dns_label.marshal ~comp:true env name in
      Mpl_uint16.marshal env atype;
      Mpl_uint16.marshal env __aclass;
      Mpl_uint32.marshal env ttl;
      Mpl_uint16.marshal env rdlength;
      Mpl_uint32.marshal env ip;
      new o
      ~name:name
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env
end

type o = [
|`A of A.o
|`NS of NS.o
|`MD of MD.o
|`MF of MF.o
|`CNAME of CNAME.o
|`SOA of SOA.o
|`MB of MB.o
|`MG of MG.o
|`MR of MR.o
|`NULL of NULL.o
|`WKS of WKS.o
|`PTR of PTR.o
|`HINFO of HINFO.o
|`MINFO of MINFO.o
|`MX of MX.o
|`TXT of TXT.o
|`RP of RP.o
|`AFSDB of AFSDB.o
|`X25 of X25.o
|`ISDN of ISDN.o
|`RT of RT.o
|`KEY of KEY.o
|`GPOS of GPOS.o
|`AAAA of AAAA.o
|`LOC of LOC.o
|`SRV of SRV.o
|`A6 of A6.o
|`DNAME of DNAME.o
|`DS of DS.o
|`UNSPEC of UNSPEC.o
|`UNKNOWN of UNKNOWN.o
]

type x = [
|`A of (env -> A.o)
|`NS of (env -> NS.o)
|`MD of (env -> MD.o)
|`MF of (env -> MF.o)
|`CNAME of (env -> CNAME.o)
|`SOA of (env -> SOA.o)
|`MB of (env -> MB.o)
|`MG of (env -> MG.o)
|`MR of (env -> MR.o)
|`NULL of (env -> NULL.o)
|`WKS of (env -> WKS.o)
|`PTR of (env -> PTR.o)
|`HINFO of (env -> HINFO.o)
|`MINFO of (env -> MINFO.o)
|`MX of (env -> MX.o)
|`TXT of (env -> TXT.o)
|`RP of (env -> RP.o)
|`AFSDB of (env -> AFSDB.o)
|`X25 of (env -> X25.o)
|`ISDN of (env -> ISDN.o)
|`RT of (env -> RT.o)
|`KEY of (env -> KEY.o)
|`GPOS of (env -> GPOS.o)
|`AAAA of (env -> AAAA.o)
|`LOC of (env -> LOC.o)
|`SRV of (env -> SRV.o)
|`A6 of (env -> A6.o)
|`DNAME of (env -> DNAME.o)
|`DS of (env -> DS.o)
|`UNSPEC of (env -> UNSPEC.o)
|`UNKNOWN of (env -> UNKNOWN.o)
]

let m (x:x) env : o = match x with
|`A (fn:(env->A.o)) -> `A (fn env)
|`NS (fn:(env->NS.o)) -> `NS (fn env)
|`MD (fn:(env->MD.o)) -> `MD (fn env)
|`MF (fn:(env->MF.o)) -> `MF (fn env)
|`CNAME (fn:(env->CNAME.o)) -> `CNAME (fn env)
|`SOA (fn:(env->SOA.o)) -> `SOA (fn env)
|`MB (fn:(env->MB.o)) -> `MB (fn env)
|`MG (fn:(env->MG.o)) -> `MG (fn env)
|`MR (fn:(env->MR.o)) -> `MR (fn env)
|`NULL (fn:(env->NULL.o)) -> `NULL (fn env)
|`WKS (fn:(env->WKS.o)) -> `WKS (fn env)
|`PTR (fn:(env->PTR.o)) -> `PTR (fn env)
|`HINFO (fn:(env->HINFO.o)) -> `HINFO (fn env)
|`MINFO (fn:(env->MINFO.o)) -> `MINFO (fn env)
|`MX (fn:(env->MX.o)) -> `MX (fn env)
|`TXT (fn:(env->TXT.o)) -> `TXT (fn env)
|`RP (fn:(env->RP.o)) -> `RP (fn env)
|`AFSDB (fn:(env->AFSDB.o)) -> `AFSDB (fn env)
|`X25 (fn:(env->X25.o)) -> `X25 (fn env)
|`ISDN (fn:(env->ISDN.o)) -> `ISDN (fn env)
|`RT (fn:(env->RT.o)) -> `RT (fn env)
|`KEY (fn:(env->KEY.o)) -> `KEY (fn env)
|`GPOS (fn:(env->GPOS.o)) -> `GPOS (fn env)
|`AAAA (fn:(env->AAAA.o)) -> `AAAA (fn env)
|`LOC (fn:(env->LOC.o)) -> `LOC (fn env)
|`SRV (fn:(env->SRV.o)) -> `SRV (fn env)
|`A6 (fn:(env->A6.o)) -> `A6 (fn env)
|`DNAME (fn:(env->DNAME.o)) -> `DNAME (fn env)
|`DS (fn:(env->DS.o)) -> `DS (fn env)
|`UNSPEC (fn:(env->UNSPEC.o)) -> `UNSPEC (fn env)
|`UNKNOWN (fn:(env->UNKNOWN.o)) -> `UNKNOWN (fn env)

let prettyprint (x:o) = match x with
|`A x -> x#prettyprint
|`NS x -> x#prettyprint
|`MD x -> x#prettyprint
|`MF x -> x#prettyprint
|`CNAME x -> x#prettyprint
|`SOA x -> x#prettyprint
|`MB x -> x#prettyprint
|`MG x -> x#prettyprint
|`MR x -> x#prettyprint
|`NULL x -> x#prettyprint
|`WKS x -> x#prettyprint
|`PTR x -> x#prettyprint
|`HINFO x -> x#prettyprint
|`MINFO x -> x#prettyprint
|`MX x -> x#prettyprint
|`TXT x -> x#prettyprint
|`RP x -> x#prettyprint
|`AFSDB x -> x#prettyprint
|`X25 x -> x#prettyprint
|`ISDN x -> x#prettyprint
|`RT x -> x#prettyprint
|`KEY x -> x#prettyprint
|`GPOS x -> x#prettyprint
|`AAAA x -> x#prettyprint
|`LOC x -> x#prettyprint
|`SRV x -> x#prettyprint
|`A6 x -> x#prettyprint
|`DNAME x -> x#prettyprint
|`DS x -> DS.prettyprint x
|`UNSPEC x -> x#prettyprint
|`UNKNOWN x -> x#prettyprint

let sizeof (x:o) = match x with
|`A x -> x#sizeof
|`NS x -> x#sizeof
|`MD x -> x#sizeof
|`MF x -> x#sizeof
|`CNAME x -> x#sizeof
|`SOA x -> x#sizeof
|`MB x -> x#sizeof
|`MG x -> x#sizeof
|`MR x -> x#sizeof
|`NULL x -> x#sizeof
|`WKS x -> x#sizeof
|`PTR x -> x#sizeof
|`HINFO x -> x#sizeof
|`MINFO x -> x#sizeof
|`MX x -> x#sizeof
|`TXT x -> x#sizeof
|`RP x -> x#sizeof
|`AFSDB x -> x#sizeof
|`X25 x -> x#sizeof
|`ISDN x -> x#sizeof
|`RT x -> x#sizeof
|`KEY x -> x#sizeof
|`GPOS x -> x#sizeof
|`AAAA x -> x#sizeof
|`LOC x -> x#sizeof
|`SRV x -> x#sizeof
|`A6 x -> x#sizeof
|`DNAME x -> x#sizeof
|`DS x -> DS.sizeof x
|`UNSPEC x -> x#sizeof
|`UNKNOWN x -> x#sizeof

let env (x:o) = match x with
|`A x -> x#env
|`NS x -> x#env
|`MD x -> x#env
|`MF x -> x#env
|`CNAME x -> x#env
|`SOA x -> x#env
|`MB x -> x#env
|`MG x -> x#env
|`MR x -> x#env
|`NULL x -> x#env
|`WKS x -> x#env
|`PTR x -> x#env
|`HINFO x -> x#env
|`MINFO x -> x#env
|`MX x -> x#env
|`TXT x -> x#env
|`RP x -> x#env
|`AFSDB x -> x#env
|`X25 x -> x#env
|`ISDN x -> x#env
|`RT x -> x#env
|`KEY x -> x#env
|`GPOS x -> x#env
|`AAAA x -> x#env
|`LOC x -> x#env
|`SRV x -> x#env
|`A6 x -> x#env
|`DNAME x -> x#env
|`DS x -> DS.env x
|`UNSPEC x -> x#env
|`UNKNOWN x -> x#env


let unmarshal 
  (env:env) : o =
  let name = Mpl_dns_label.unmarshal env in (* custom *)
  let atype = Mpl_uint16.unmarshal env in
  skip env 2; (* skipped aclass *)
  skip env 4; (* skipped ttl *)
  let rdlength = Mpl_uint16.unmarshal env in
  skip env 0; (* skipped start_of_answers *)
  let start_of_answers___offset = curpos env in
  match (Mpl_uint16.to_int atype) with
  |999 -> `UNKNOWN (
    let data_length = (Mpl_uint16.to_int rdlength) in
    skip env data_length; (* skipped data *)
    let data___offset = curpos env in
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new UNKNOWN.o env
    ~name:name
    ~data_length:data_length
  )
  |103 -> `UNSPEC (
    let data_length = (Mpl_uint16.to_int rdlength) in
    skip env data_length; (* skipped data *)
    let data___offset = curpos env in
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new UNSPEC.o env
    ~name:name
    ~data_length:data_length
  )
  |43 -> `DS (
    skip env 2; (* skipped key_tag *)
    skip env 1; (* skipped algorithm *)
    let digest_type = Mpl_byte.to_int (Mpl_byte.unmarshal env) in
    match digest_type with
    |1 -> `SHA1 (
      skip env 20; (* skipped digest *)
      skip env 0; (* skipped end_of_answers *)
      let end_of_answers___offset = curpos env in
      new DS.SHA1.o env
      ~name:name
    )
    |x -> raise (Bad_packet (Printf.sprintf "DS: %d" x))
  )
  |39 -> `DNAME (
    let target = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new DNAME.o env
    ~name:name
    ~target:target
  )
  |36 -> `A6 (
    let data_length = (Mpl_uint16.to_int rdlength) in
    skip env data_length; (* skipped data *)
    let data___offset = curpos env in
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new A6.o env
    ~name:name
    ~data_length:data_length
  )
  |33 -> `SRV (
    skip env 2; (* skipped priority *)
    skip env 2; (* skipped weight *)
    skip env 2; (* skipped port *)
    let target = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new SRV.o env
    ~name:name
    ~target:target
  )
  |29 -> `LOC (
    skip env 1; (* skipped version *)
    skip env 1; (* skipped size *)
    skip env 1; (* skipped horiz_pre *)
    skip env 1; (* skipped vert_pre *)
    skip env 4; (* skipped latitude *)
    skip env 4; (* skipped longitude *)
    skip env 4; (* skipped altitude *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new LOC.o env
    ~name:name
  )
  |28 -> `AAAA (
    skip env 16; (* skipped ip *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new AAAA.o env
    ~name:name
  )
  |27 -> `GPOS (
    let longitude = Mpl_string8.unmarshal env in (* custom *)
    let latitude = Mpl_string8.unmarshal env in (* custom *)
    let altitude = Mpl_string8.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new GPOS.o env
    ~name:name
    ~longitude:longitude
    ~latitude:latitude
    ~altitude:altitude
  )
  |25 -> `KEY (
    let data_length = (Mpl_uint16.to_int rdlength) in
    skip env data_length; (* skipped data *)
    let data___offset = curpos env in
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new KEY.o env
    ~name:name
    ~data_length:data_length
  )
  |21 -> `RT (
    skip env 2; (* skipped preference *)
    let intermediate_host = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new RT.o env
    ~name:name
    ~intermediate_host:intermediate_host
  )
  |20 -> `ISDN (
    let data = Mpl_string8.unmarshal env in (* custom *)
    let data___offset = curpos env in
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new ISDN.o env
    ~name:name
    ~data:data
  )
  |19 -> `X25 (
    let psdn_address = Mpl_string8.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new X25.o env
    ~name:name
    ~psdn_address:psdn_address
  )
  |18 -> `AFSDB (
    skip env 2; (* skipped subtype *)
    let hostname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new AFSDB.o env
    ~name:name
    ~hostname:hostname
  )
  |17 -> `RP (
    let mbox_dname = Mpl_dns_label.unmarshal env in (* custom *)
    let txt_dname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new RP.o env
    ~name:name
    ~mbox_dname:mbox_dname
    ~txt_dname:txt_dname
  )
  |16 -> `TXT (
    let data = Mpl_string8.unmarshal env in (* custom *)
    let data___offset = curpos env in
    let misc_length = (((Mpl_uint16.to_int rdlength) - data___offset) + start_of_answers___offset) in
    skip env misc_length; (* skipped misc *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new TXT.o env
    ~name:name
    ~data:data
    ~misc_length:misc_length
  )
  |15 -> `MX (
    skip env 2; (* skipped preference *)
    let hostname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new MX.o env
    ~name:name
    ~hostname:hostname
  )
  |14 -> `MINFO (
    let rmailbox = Mpl_dns_label.unmarshal env in (* custom *)
    let emailbox = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new MINFO.o env
    ~name:name
    ~rmailbox:rmailbox
    ~emailbox:emailbox
  )
  |13 -> `HINFO (
    let cpu = Mpl_string8.unmarshal env in (* custom *)
    let os = Mpl_string8.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new HINFO.o env
    ~name:name
    ~cpu:cpu
    ~os:os
  )
  |12 -> `PTR (
    let ptrdname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new PTR.o env
    ~name:name
    ~ptrdname:ptrdname
  )
  |11 -> `WKS (
    skip env 4; (* skipped address *)
    skip env 1; (* skipped protocol *)
    let bitmap_length = ((Mpl_uint16.to_int rdlength) - 5) in
    skip env bitmap_length; (* skipped bitmap *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new WKS.o env
    ~name:name
    ~bitmap_length:bitmap_length
  )
  |10 -> `NULL (
    let data_length = (Mpl_uint16.to_int rdlength) in
    skip env data_length; (* skipped data *)
    let data___offset = curpos env in
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new NULL.o env
    ~name:name
    ~data_length:data_length
  )
  |9 -> `MR (
    let newname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new MR.o env
    ~name:name
    ~newname:newname
  )
  |8 -> `MG (
    let mgmname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new MG.o env
    ~name:name
    ~mgmname:mgmname
  )
  |7 -> `MB (
    let madname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new MB.o env
    ~name:name
    ~madname:madname
  )
  |6 -> `SOA (
    let primary_ns = Mpl_dns_label.unmarshal env in (* custom *)
    let admin_mb = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 4; (* skipped serial *)
    skip env 4; (* skipped refresh *)
    skip env 4; (* skipped retry *)
    skip env 4; (* skipped expiration *)
    skip env 4; (* skipped minttl *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new SOA.o env
    ~name:name
    ~primary_ns:primary_ns
    ~admin_mb:admin_mb
  )
  |5 -> `CNAME (
    let cname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new CNAME.o env
    ~name:name
    ~cname:cname
  )
  |4 -> `MF (
    let madname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new MF.o env
    ~name:name
    ~madname:madname
  )
  |3 -> `MD (
    let madname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new MD.o env
    ~name:name
    ~madname:madname
  )
  |2 -> `NS (
    let hostname = Mpl_dns_label.unmarshal env in (* custom *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new NS.o env
    ~name:name
    ~hostname:hostname
  )
  |1 -> `A (
    skip env 4; (* skipped ip *)
    skip env 0; (* skipped end_of_answers *)
    let end_of_answers___offset = curpos env in
    new A.o env
    ~name:name
  )
  |x -> raise (Bad_packet (Printf.sprintf ": %d" x))
