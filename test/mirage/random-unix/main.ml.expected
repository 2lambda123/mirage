(* Geneated by functoria_test *)

let (>>=) x f = f x
let return x = x
let run x = x

module Mirage_crypto_rng_mirage_make__3 =
  Mirage_crypto_rng_mirage.Make(OS.Time)(Mclock)

module Ethernet_make__5 = Ethernet.Make(Netif)

module Arp_make__6 = Arp.Make(Ethernet_make__5)(OS.Time)

module Mirage_crypto_rng_mirage_make__7 =
  Mirage_crypto_rng_mirage.Make(OS.Time)(Mclock)

module Static_ipv4_make__8 =
  Static_ipv4.Make(Mirage_crypto_rng_mirage_make__7)(Mclock)
  (Ethernet_make__5)(Arp_make__6)

module Icmpv4_make__9 = Icmpv4.Make(Static_ipv4_make__8)

module Udp_make__10 = Udp.Make(Static_ipv4_make__8)
  (Mirage_crypto_rng_mirage_make__3)

module Tcp_flow_make__11 = Tcp.Flow.Make(Static_ipv4_make__8)(OS.Time)
  (Mclock)(Mirage_crypto_rng_mirage_make__3)

module Tcpip_stack_direct_make__12 = Tcpip_stack_direct.Make(OS.Time)
  (Mirage_crypto_rng_mirage_make__3)(Netif)(Ethernet_make__5)(Arp_make__6)
  (Static_ipv4_make__8)(Icmpv4_make__9)(Udp_make__10)(Tcp_flow_make__11)

module Conduit_mirage_with_tcp__13 =
  Conduit_mirage.With_tcp(Tcpip_stack_direct_make__12)

module App_make__16 = App.Make(Conduit_mirage)
  (Mirage_crypto_rng_mirage_make__7)

let os_time__1 = lazy (
  return ()
  )

let mclock__2 = lazy (
  return ()
  )

let mirage_crypto_rng_mirage_make__3 = lazy (
  let __os_time__1 = Lazy.force os_time__1 in
  let __mclock__2 = Lazy.force mclock__2 in
  __os_time__1 >>= fun _os_time__1 ->
  __mclock__2 >>= fun _mclock__2 ->
  Mirage_crypto_rng_mirage_make__3.initialize (module Mirage_crypto_rng.Fortuna)
  )

let netif__4 = lazy (
  Netif.connect (Key_gen.interface ())
  )

let ethernet_make__5 = lazy (
  let __netif__4 = Lazy.force netif__4 in
  __netif__4 >>= fun _netif__4 ->
  Ethernet_make__5.connect _netif__4
  )

let arp_make__6 = lazy (
  let __ethernet_make__5 = Lazy.force ethernet_make__5 in
  let __os_time__1 = Lazy.force os_time__1 in
  __ethernet_make__5 >>= fun _ethernet_make__5 ->
  __os_time__1 >>= fun _os_time__1 ->
  Arp_make__6.connect _ethernet_make__5
  )

let mirage_crypto_rng_mirage_make__7 = lazy (
  let __os_time__1 = Lazy.force os_time__1 in
  let __mclock__2 = Lazy.force mclock__2 in
  __os_time__1 >>= fun _os_time__1 ->
  __mclock__2 >>= fun _mclock__2 ->
  Mirage_crypto_rng_mirage_make__7.initialize (module Mirage_crypto_rng.Fortuna)
  )

let static_ipv4_make__8 = lazy (
  let __mirage_crypto_rng_mirage_make__7 =
                                          Lazy.force mirage_crypto_rng_mirage_make__7 in
  let __mclock__2 = Lazy.force mclock__2 in
  let __ethernet_make__5 = Lazy.force ethernet_make__5 in
  let __arp_make__6 = Lazy.force arp_make__6 in
  __mirage_crypto_rng_mirage_make__7 >>= fun _mirage_crypto_rng_mirage_make__7 ->
  __mclock__2 >>= fun _mclock__2 ->
  __ethernet_make__5 >>= fun _ethernet_make__5 ->
  __arp_make__6 >>= fun _arp_make__6 ->
  Static_ipv4_make__8.connect  ~cidr:(Key_gen.ipv4 ())
                           ?gateway:(Key_gen.ipv4_gateway ())
                           _ethernet_make__5 _arp_make__6
  )

let icmpv4_make__9 = lazy (
  let __static_ipv4_make__8 = Lazy.force static_ipv4_make__8 in
  __static_ipv4_make__8 >>= fun _static_ipv4_make__8 ->
  Icmpv4_make__9.connect _static_ipv4_make__8
  )

let udp_make__10 = lazy (
  let __static_ipv4_make__8 = Lazy.force static_ipv4_make__8 in
  let __mirage_crypto_rng_mirage_make__3 =
                                          Lazy.force mirage_crypto_rng_mirage_make__3 in
  __static_ipv4_make__8 >>= fun _static_ipv4_make__8 ->
  __mirage_crypto_rng_mirage_make__3 >>= fun _mirage_crypto_rng_mirage_make__3 ->
  Udp_make__10.connect _static_ipv4_make__8
  )

let tcp_flow_make__11 = lazy (
  let __static_ipv4_make__8 = Lazy.force static_ipv4_make__8 in
  let __os_time__1 = Lazy.force os_time__1 in
  let __mclock__2 = Lazy.force mclock__2 in
  let __mirage_crypto_rng_mirage_make__3 =
                                          Lazy.force mirage_crypto_rng_mirage_make__3 in
  __static_ipv4_make__8 >>= fun _static_ipv4_make__8 ->
  __os_time__1 >>= fun _os_time__1 ->
  __mclock__2 >>= fun _mclock__2 ->
  __mirage_crypto_rng_mirage_make__3 >>= fun _mirage_crypto_rng_mirage_make__3 ->
  Tcp_flow_make__11.connect _static_ipv4_make__8
  )

let tcpip_stack_direct_make__12 = lazy (
  let __os_time__1 = Lazy.force os_time__1 in
  let __mirage_crypto_rng_mirage_make__3 =
                                          Lazy.force mirage_crypto_rng_mirage_make__3 in
  let __netif__4 = Lazy.force netif__4 in
  let __ethernet_make__5 = Lazy.force ethernet_make__5 in
  let __arp_make__6 = Lazy.force arp_make__6 in
  let __static_ipv4_make__8 = Lazy.force static_ipv4_make__8 in
  let __icmpv4_make__9 = Lazy.force icmpv4_make__9 in
  let __udp_make__10 = Lazy.force udp_make__10 in
  let __tcp_flow_make__11 = Lazy.force tcp_flow_make__11 in
  __os_time__1 >>= fun _os_time__1 ->
  __mirage_crypto_rng_mirage_make__3 >>= fun _mirage_crypto_rng_mirage_make__3 ->
  __netif__4 >>= fun _netif__4 ->
  __ethernet_make__5 >>= fun _ethernet_make__5 ->
  __arp_make__6 >>= fun _arp_make__6 ->
  __static_ipv4_make__8 >>= fun _static_ipv4_make__8 ->
  __icmpv4_make__9 >>= fun _icmpv4_make__9 ->
  __udp_make__10 >>= fun _udp_make__10 ->
  __tcp_flow_make__11 >>= fun _tcp_flow_make__11 ->
  Tcpip_stack_direct_make__12.connect _netif__4 _ethernet_make__5 _arp_make__6 _static_ipv4_make__8 _icmpv4_make__9 _udp_make__10 _tcp_flow_make__11
  )

let conduit_mirage_with_tcp__13 = lazy (
  let __tcpip_stack_direct_make__12 = Lazy.force tcpip_stack_direct_make__12 in
  __tcpip_stack_direct_make__12 >>= fun _tcpip_stack_direct_make__12 ->
  Lwt.return (Conduit_mirage_with_tcp__13.connect _tcpip_stack_direct_make__12)

  )

let conduit_mirage__14 = lazy (
  Lwt.return Conduit_mirage.with_tls
  )

let conduit_mirage__15 = lazy (
  let __conduit_mirage_with_tcp__13 = Lazy.force conduit_mirage_with_tcp__13 in
  let __conduit_mirage__14 = Lazy.force conduit_mirage__14 in
  __conduit_mirage_with_tcp__13 >>= fun _conduit_mirage_with_tcp__13 ->
  __conduit_mirage__14 >>= fun _conduit_mirage__14 ->
  Lwt.return Conduit_mirage.empty >>= _conduit_mirage_with_tcp__13 >>=
_conduit_mirage__14 >>=
fun t -> Lwt.return t
  )

let app_make__16 = lazy (
  let __conduit_mirage__15 = Lazy.force conduit_mirage__15 in
  let __mirage_crypto_rng_mirage_make__7 =
                                          Lazy.force mirage_crypto_rng_mirage_make__7 in
  __conduit_mirage__15 >>= fun _conduit_mirage__15 ->
  __mirage_crypto_rng_mirage_make__7 >>= fun _mirage_crypto_rng_mirage_make__7 ->
  App_make__16.start _conduit_mirage__15 _mirage_crypto_rng_mirage_make__7
  )

let () =
  let t =
  Lazy.force app_make__16
  in run t
